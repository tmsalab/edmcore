// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/edmcore.h"
#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// attribute_bijection
arma::uvec attribute_bijection(unsigned int K);
RcppExport SEXP _edmcore_attribute_bijection(SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(attribute_bijection(K));
    return rcpp_result_gen;
END_RCPP
}
// attribute_inv_bijection
arma::uvec attribute_inv_bijection(unsigned int K, double CL);
RcppExport SEXP _edmcore_attribute_inv_bijection(SEXP KSEXP, SEXP CLSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type K(KSEXP);
    Rcpp::traits::input_parameter< double >::type CL(CLSEXP);
    rcpp_result_gen = Rcpp::wrap(attribute_inv_bijection(K, CL));
    return rcpp_result_gen;
END_RCPP
}
// attribute_gen_bijection
arma::uvec attribute_gen_bijection(unsigned int K, unsigned int M);
RcppExport SEXP _edmcore_attribute_gen_bijection(SEXP KSEXP, SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type K(KSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(attribute_gen_bijection(K, M));
    return rcpp_result_gen;
END_RCPP
}
// attribute_inv_gen_bijection
arma::uvec attribute_inv_gen_bijection(unsigned int K, unsigned int M, double CL);
RcppExport SEXP _edmcore_attribute_inv_gen_bijection(SEXP KSEXP, SEXP MSEXP, SEXP CLSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type K(KSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type M(MSEXP);
    Rcpp::traits::input_parameter< double >::type CL(CLSEXP);
    rcpp_result_gen = Rcpp::wrap(attribute_inv_gen_bijection(K, M, CL));
    return rcpp_result_gen;
END_RCPP
}
// attribute_classes
arma::mat attribute_classes(int K);
RcppExport SEXP _edmcore_attribute_classes(SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(attribute_classes(K));
    return rcpp_result_gen;
END_RCPP
}
// GenerateAtable
Rcpp::List GenerateAtable(unsigned int nClass, unsigned int K, unsigned int M, unsigned int order);
RcppExport SEXP _edmcore_GenerateAtable(SEXP nClassSEXP, SEXP KSEXP, SEXP MSEXP, SEXP orderSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type nClass(nClassSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type K(KSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type M(MSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type order(orderSEXP);
    rcpp_result_gen = Rcpp::wrap(GenerateAtable(nClass, K, M, order));
    return rcpp_result_gen;
END_RCPP
}
// n_choose_k
unsigned int n_choose_k(unsigned int n, unsigned int k);
RcppExport SEXP _edmcore_n_choose_k(SEXP nSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type n(nSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(n_choose_k(n, k));
    return rcpp_result_gen;
END_RCPP
}
// combination_matrix
arma::umat combination_matrix(unsigned int n, unsigned int k);
RcppExport SEXP _edmcore_combination_matrix(SEXP nSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type n(nSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(combination_matrix(n, k));
    return rcpp_result_gen;
END_RCPP
}
// combination_matrix_from_vector
arma::umat combination_matrix_from_vector(arma::urowvec x, unsigned int k);
RcppExport SEXP _edmcore_combination_matrix_from_vector(SEXP xSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::urowvec >::type x(xSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(combination_matrix_from_vector(x, k));
    return rcpp_result_gen;
END_RCPP
}
// set_diff_cpp
arma::urowvec set_diff_cpp(arma::urowvec x, arma::urowvec y);
RcppExport SEXP _edmcore_set_diff_cpp(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::urowvec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::urowvec >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(set_diff_cpp(x, y));
    return rcpp_result_gen;
END_RCPP
}
// is_q_generic_identified
bool is_q_generic_identified(const arma::mat& Q);
RcppExport SEXP _edmcore_is_q_generic_identified(SEXP QSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Q(QSEXP);
    rcpp_result_gen = Rcpp::wrap(is_q_generic_identified(Q));
    return rcpp_result_gen;
END_RCPP
}
// is_q_generic_complete
bool is_q_generic_complete(const arma::mat& Q);
RcppExport SEXP _edmcore_is_q_generic_complete(SEXP QSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Q(QSEXP);
    rcpp_result_gen = Rcpp::wrap(is_q_generic_complete(Q));
    return rcpp_result_gen;
END_RCPP
}
// binary_q_ideal
arma::mat binary_q_ideal(unsigned int k);
RcppExport SEXP _edmcore_binary_q_ideal(SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(binary_q_ideal(k));
    return rcpp_result_gen;
END_RCPP
}
// seq_linear_increase
arma::rowvec seq_linear_increase(unsigned int start, unsigned int end);
RcppExport SEXP _edmcore_seq_linear_increase(SEXP startSEXP, SEXP endSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type start(startSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type end(endSEXP);
    rcpp_result_gen = Rcpp::wrap(seq_linear_increase(start, end));
    return rcpp_result_gen;
END_RCPP
}
// seq_linear_decrease
arma::rowvec seq_linear_decrease(unsigned int start, unsigned int end);
RcppExport SEXP _edmcore_seq_linear_decrease(SEXP startSEXP, SEXP endSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type start(startSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type end(endSEXP);
    rcpp_result_gen = Rcpp::wrap(seq_linear_decrease(start, end));
    return rcpp_result_gen;
END_RCPP
}
// is_strict_q_identified
bool is_strict_q_identified(const arma::mat Q);
RcppExport SEXP _edmcore_is_strict_q_identified(SEXP QSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type Q(QSEXP);
    rcpp_result_gen = Rcpp::wrap(is_strict_q_identified(Q));
    return rcpp_result_gen;
END_RCPP
}
// permuteAtableIndices
arma::vec permuteAtableIndices(unsigned int nClass, unsigned int K, unsigned int order, const arma::vec& vv, const arma::vec& perm);
RcppExport SEXP _edmcore_permuteAtableIndices(SEXP nClassSEXP, SEXP KSEXP, SEXP orderSEXP, SEXP vvSEXP, SEXP permSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type nClass(nClassSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type K(KSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type order(orderSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type vv(vvSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type perm(permSEXP);
    rcpp_result_gen = Rcpp::wrap(permuteAtableIndices(nClass, K, order, vv, perm));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_edmcore_attribute_bijection", (DL_FUNC) &_edmcore_attribute_bijection, 1},
    {"_edmcore_attribute_inv_bijection", (DL_FUNC) &_edmcore_attribute_inv_bijection, 2},
    {"_edmcore_attribute_gen_bijection", (DL_FUNC) &_edmcore_attribute_gen_bijection, 2},
    {"_edmcore_attribute_inv_gen_bijection", (DL_FUNC) &_edmcore_attribute_inv_gen_bijection, 3},
    {"_edmcore_attribute_classes", (DL_FUNC) &_edmcore_attribute_classes, 1},
    {"_edmcore_GenerateAtable", (DL_FUNC) &_edmcore_GenerateAtable, 4},
    {"_edmcore_n_choose_k", (DL_FUNC) &_edmcore_n_choose_k, 2},
    {"_edmcore_combination_matrix", (DL_FUNC) &_edmcore_combination_matrix, 2},
    {"_edmcore_combination_matrix_from_vector", (DL_FUNC) &_edmcore_combination_matrix_from_vector, 2},
    {"_edmcore_set_diff_cpp", (DL_FUNC) &_edmcore_set_diff_cpp, 2},
    {"_edmcore_is_q_generic_identified", (DL_FUNC) &_edmcore_is_q_generic_identified, 1},
    {"_edmcore_is_q_generic_complete", (DL_FUNC) &_edmcore_is_q_generic_complete, 1},
    {"_edmcore_binary_q_ideal", (DL_FUNC) &_edmcore_binary_q_ideal, 1},
    {"_edmcore_seq_linear_increase", (DL_FUNC) &_edmcore_seq_linear_increase, 2},
    {"_edmcore_seq_linear_decrease", (DL_FUNC) &_edmcore_seq_linear_decrease, 2},
    {"_edmcore_is_strict_q_identified", (DL_FUNC) &_edmcore_is_strict_q_identified, 1},
    {"_edmcore_permuteAtableIndices", (DL_FUNC) &_edmcore_permuteAtableIndices, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_edmcore(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
